{"version":3,"file":"admin.js","mappings":"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","sources":["webpack://@blomstra/email-conversations/webpack/bootstrap","webpack://@blomstra/email-conversations/webpack/runtime/compat get default export","webpack://@blomstra/email-conversations/webpack/runtime/define property getters","webpack://@blomstra/email-conversations/webpack/runtime/hasOwnProperty shorthand","webpack://@blomstra/email-conversations/webpack/runtime/make namespace object","webpack://@blomstra/email-conversations/external root \"flarum.core.compat['admin/app']\"","webpack://@blomstra/email-conversations/external root \"flarum.core.compat['common/Model']\"","webpack://@blomstra/email-conversations/external root \"flarum.core.compat['common/models/User']\"","webpack://@blomstra/email-conversations/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@blomstra/email-conversations/external root \"flarum.core.compat['admin/components/ExtensionPage']\"","webpack://@blomstra/email-conversations/external root \"flarum.core.compat['tags/utils/sortTags']\"","webpack://@blomstra/email-conversations/external root \"flarum.core.compat['common/components/Alert']\"","webpack://@blomstra/email-conversations/external root \"flarum.core.compat['common/components/LinkButton']\"","webpack://@blomstra/email-conversations/external root \"flarum.core.compat['common/utils/ItemList']\"","webpack://@blomstra/email-conversations/./src/admin/components/SettingsPage.tsx","webpack://@blomstra/email-conversations/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@blomstra/email-conversations/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://@blomstra/email-conversations/external root \"flarum.core.compat['common/extend']\"","webpack://@blomstra/email-conversations/external root \"flarum.core.compat['admin/components/MailPage']\"","webpack://@blomstra/email-conversations/external root \"flarum.core.compat['common/components/LoadingIndicator']\"","webpack://@blomstra/email-conversations/external root \"flarum.core.compat['common/components/FieldSet']\"","webpack://@blomstra/email-conversations/external root \"flarum.core.compat['common/components/Button']\"","webpack://@blomstra/email-conversations/./src/admin/index.ts","webpack://@blomstra/email-conversations/./src/common/extend/addAdditionalEmailsAttributeToUser.ts","webpack://@blomstra/email-conversations/./src/admin/extend/extendMailPage.tsx"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['admin/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/User'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['admin/components/ExtensionPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['tags/utils/sortTags'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Alert'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/LinkButton'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/ItemList'];","import app from 'flarum/admin/app';\nimport ExtensionPage from 'flarum/admin/components/ExtensionPage';\nimport sortTags from 'flarum/tags/utils/sortTags';\nimport Alert from 'flarum/common/components/Alert';\nimport LinkButton from 'flarum/common/components/LinkButton';\n\nimport type Mithril from 'mithril';\nimport ItemList from 'flarum/common/utils/ItemList';\n\nexport default class SettingsPage extends ExtensionPage {\n  oninit(vnode: Mithril.Vnode) {\n    super.oninit(vnode);\n\n    this.refresh();\n  }\n\n  refresh() {\n    app.store.find('tags', { include: 'parent' }).then(() => {\n      m.redraw();\n    });\n  }\n\n  isMailgunConfigured() {\n    //TODO add more checks here\n    return this.setting('mail_driver')() !== 'mailgun';\n  }\n\n  errorControls() {\n    const items = new ItemList<Mithril.Children>();\n\n    items.add(\n      'mailSettings',\n      <LinkButton className=\"Button Button--link\" href={'/mail'}>\n        {app.translator.trans('blomstra-email-conversations.admin.settings.alert.mail_settings')}\n      </LinkButton>,\n      50\n    );\n\n    return items;\n  }\n\n  content() {\n    const mailgunReady = this.isMailgunConfigured();\n\n    const tags = sortTags(app.store.all('tags'))\n      .filter((t) => t.position() !== null)\n      .reduce(\n        (acc, curr) => {\n          acc[curr.slug()] = curr.name() + ' (' + curr.slug() + ')';\n          return acc;\n        },\n        { '': app.translator.trans('blomstra-email-conversations.admin.settings.email_post_tag_none') }\n      );\n\n    return (\n      <div className=\"EmailConversationsSettingsPage\">\n        {mailgunReady && (\n          <div className=\"EmailConversationsSettingsPage--alert\">\n            <Alert type=\"error\" dismissible={false} controls={this.errorControls().toArray()}>\n              {app.translator.trans('blomstra-email-conversations.admin.settings.alert.mailgun_not_configured')}\n            </Alert>\n          </div>\n        )}\n        <div className=\"container\">\n          <div className=\"EmailConversations-content\">\n            {this.buildSettingComponent({\n              setting: 'blomstra-email-conversations.max-additional-emails-count',\n              type: 'number',\n              min: 0,\n              max: 100,\n              label: app.translator.trans('blomstra-email-conversations.admin.settings.maximum_additional_emails_per_user'),\n              help: app.translator.trans('blomstra-email-conversations.admin.settings.maximum_additional_emails_per_user_help'),\n              placeholder: '5',\n            })}\n\n            {this.buildSettingComponent({\n              label: app.translator.trans('blomstra-email-conversations.admin.settings.email_post_tag'),\n              help: app.translator.trans('blomstra-email-conversations.admin.settings.email_post_tag_help'),\n              type: 'select',\n              setting: 'blomstra-email-conversations.tag-slug',\n              options: tags,\n              default: '',\n            })}\n            {this.buildSettingComponent({\n              setting: 'blomstra-email-conversations.auto-subscribe',\n              type: 'bool',\n              label: app.translator.trans('blomstra-email-conversations.admin.settings.auto_subscribe'),\n              help: app.translator.trans('blomstra-email-conversations.admin.settings.auto_subscribe_help'),\n            })}\n            {this.buildSettingComponent({\n              setting: 'blomstra-email-conversations.require_approval',\n              type: 'bool',\n              label: app.translator.trans('blomstra-email-conversations.admin.settings.require_approval'),\n              help: app.translator.trans('blomstra-email-conversations.admin.settings.require_approval_help'),\n            })}\n            {this.buildSettingComponent({\n              setting: 'blomstra-email-conversations.match_subject',\n              label: app.translator.trans('blomstra-email-conversations.admin.settings.match_subject'),\n              help: app.translator.trans('blomstra-email-conversations.admin.settings.match_subject_help'),\n              type: 'boolean',\n            })}\n          </div>\n          {this.submitButton()}\n        </div>\n      </div>\n    );\n  }\n}\n","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['admin/components/MailPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/LoadingIndicator'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/FieldSet'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","import app from 'flarum/admin/app';\nimport commonInit from '../common';\nimport SettingsPage from './components/SettingsPage';\nimport extendMailPage from './extend/extendMailPage';\n\napp.initializers.add('blomstra/email-conversations', () => {\n  commonInit();\n  extendMailPage();\n\n  app.extensionData\n    .for('blomstra-email-conversations')\n    .registerPage(SettingsPage)\n    .registerPermission(\n      {\n        icon: 'fas fa-mail-bulk',\n        label: app.translator.trans('blomstra-email-conversations.admin.permissions.have_additional_emails'),\n        permission: 'haveAdditionalEmail',\n      },\n      'start'\n    );\n  // Not worrying about anything but the current user for now, but this will be required for when we add\n  // the ability for Mods, etc to edit other users' email addresses.\n  // .registerPermission(\n  //   {\n  //     icon: 'fas fa-mail-bulk',\n  //     label: app.translator.trans('blomstra-conversations-emailadmin.permissions.manage_additional_emails_of_others'),\n  //     permission: 'viewAdditionalEmailAddresses',\n  //   },\n  //   'moderate'\n  // );\n});\n","import Model from 'flarum/common/Model';\nimport User from 'flarum/common/models/User';\n\nexport default function addAdditionalEmailsAttributeToUser() {\n  User.prototype.additionalEmails = Model.hasMany('additional_emails');\n}\n","import app from 'flarum/admin/app';\nimport { extend, override } from 'flarum/common/extend';\nimport MailPage from 'flarum/admin/components/MailPage';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport Alert from 'flarum/common/components/Alert';\nimport FieldSet from 'flarum/common/components/FieldSet';\n\nimport Mithril from 'mithril';\nimport Button from 'flarum/common/components/Button';\n\nexport default function extendMailPage() {\n  //add an mailItems() function to MailPage, until PR is merged\n  MailPage.prototype.mailItems = function () {\n    const items = new ItemList();\n    const fields = this.driverFields[this.setting('mail_driver')()];\n    const fieldKeys = Object.keys(fields);\n\n    items.add(\n      'mail-from',\n      this.buildSettingComponent({\n        type: 'text',\n        setting: 'mail_from',\n        label: app.translator.trans('core.admin.email.addresses_heading'),\n      }),\n      100\n    );\n\n    items.add(\n      'mail-driver',\n      this.buildSettingComponent({\n        type: 'select',\n        setting: 'mail_driver',\n        options: Object.keys(this.driverFields).reduce((memo, val) => ({ ...memo, [val]: val }), {}),\n        label: app.translator.trans('core.admin.email.driver_heading'),\n      }),\n      95\n    );\n\n    !this.status.sending &&\n      items.add('sending-status', <Alert dismissible={false}>{app.translator.trans('core.admin.email.not_sending_message')}</Alert>, 90);\n\n    fieldKeys.length > 0 &&\n      items.add(\n        'driver-settings',\n        <FieldSet label={app.translator.trans(`core.admin.email.${this.setting('mail_driver')()}_heading`)} className=\"MailPage-MailSettings\">\n          <div className=\"MailPage-MailSettings-input\">{this.fieldKeyItems(fields, fieldKeys).toArray()}</div>\n        </FieldSet>,\n        60\n      );\n\n    items.add('submit-button', this.submitButton(), 10);\n\n    items.add(\n      'send-test',\n      <FieldSet label={app.translator.trans('core.admin.email.send_test_mail_heading')} className=\"MailPage-MailSettings\">\n        <div className=\"helpText\">{app.translator.trans('core.admin.email.send_test_mail_text', { email: app.session.user.email() })}</div>\n        <Button className=\"Button Button--primary\" disabled={this.sendingTest || this.isChanged()} onclick={() => this.sendTestEmail()}>\n          {app.translator.trans('core.admin.email.send_test_mail_button')}\n        </Button>\n      </FieldSet>,\n      0\n    );\n\n    return items;\n  };\n\n  // add fieldKeyItems until PR is merged\n  MailPage.prototype.fieldKeyItems = function (fields, fieldKeys) {\n    const items = new ItemList();\n    var priority = 100;\n\n    fieldKeys.map((field) => {\n      const fieldInfo = fields[field];\n\n      items.add(\n        'field-' + field,\n        <>\n          {this.buildSettingComponent({\n            type: typeof fieldInfo === 'string' ? 'text' : 'select',\n            label: app.translator.trans(`core.admin.email.${field}_label`),\n            setting: field,\n            options: fieldInfo,\n          })}\n          {this.status.errors[field] && <p className=\"ValidationError\">{this.status.errors[field]}</p>}\n        </>,\n        priority\n      );\n\n      priority -= 5;\n    });\n\n    return items;\n  };\n\n  // Alt content() until PR is merged.\n  override(MailPage.prototype, 'content', function (original) {\n    if (this.loading) {\n      return <LoadingIndicator />;\n    }\n\n    return <div className=\"Form\">{this.mailItems().toArray()}</div>;\n  });\n\n  extend(MailPage.prototype, 'mailItems', function (items: ItemList<Mithril.Children>) {\n    if (this.route === undefined) {\n      items.add(\n        'create-route',\n        <Button className=\"Button\" onclick={() => this.configMailgunRoute()} loading={this.configuringRoute}>\n          {app.translator.trans('blomstra-email-conversations.admin.email-page.mailgun.create-route')}\n        </Button>,\n        5\n      );\n    } else {\n      items.add(\n        'route-info',\n        <FieldSet label={app.translator.trans('blomstra-email-conversations.admin.email-page.mailgun.heading')}>\n          <div>\n            <p>\n              <code>{this.route['id']}</code> - {this.route['description']}\n            </p>\n          </div>\n        </FieldSet>,\n        5\n      );\n    }\n    return items;\n  });\n\n  override(MailPage.prototype, 'refresh', function (original) {\n    this.loading = true;\n\n    this.status = { sending: false, errors: {} };\n\n    app\n      .request({\n        method: 'GET',\n        url: app.forum.attribute('apiUrl') + '/mail/settings',\n      })\n      .then((response) => {\n        this.driverFields = response['data']['attributes']['fields'];\n        this.status.sending = response['data']['attributes']['sending'];\n        this.status.errors = response['data']['attributes']['errors'];\n        this.route = response['data']['attributes']['route'];\n\n        this.loading = false;\n        m.redraw();\n      });\n  });\n\n  MailPage.prototype.configMailgunRoute = function () {\n    this.configuringRoute = true;\n\n    app\n      .request({\n        method: 'POST',\n        url: app.forum.attribute('apiUrl') + '/mailgun/create/route',\n        data: {},\n      })\n      .then(() => {\n        this.configuringRoute = false;\n        this.refresh();\n        m.redraw();\n      });\n  };\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","_setPrototypeOf","p","setPrototypeOf","__proto__","SettingsPage","subClass","superClass","create","constructor","oninit","vnode","this","refresh","app","include","then","m","redraw","isMailgunConfigured","setting","errorControls","items","ItemList","add","className","href","content","mailgunReady","tags","sortTags","filter","t","position","reduce","acc","curr","slug","name","type","dismissible","controls","toArray","buildSettingComponent","min","max","label","help","placeholder","options","default","submitButton","ExtensionPage","_extends","assign","target","i","arguments","length","source","apply","User","Model","MailPage","fields","driverFields","fieldKeys","keys","memo","val","status","sending","fieldKeyItems","email","disabled","sendingTest","isChanged","onclick","sendTestEmail","priority","map","field","fieldInfo","errors","override","original","loading","mailItems","extend","undefined","route","configMailgunRoute","configuringRoute","method","url","response","data","registerPage","registerPermission","icon","permission"],"sourceRoot":""}